name: PyEPP

on:
  push:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements.dev.txt
        pip install setuptools==65.5.1
        pip install build twine
    - name: Lint
      run: |
        ./scripts/linter.sh
    - name: Tests
      run: |
        ./scripts/tests.sh
    - name: Package Audit
      run: |
        ./scripts/package-audit.sh
    - name: Code Security Check
      run: |
        ./scripts/code-security-check.sh
    - name: Get Previous tag
      id: previous_tag
      uses: "WyriHaximus/github-action-get-previous-tag@v1"
    - name: Extract version
      run: |
        NEW_VERSION=$(grep '^__version__' "pyepp/__init__.py" | sed -E 's/^__version__ = "(.*)"/v\1/')
        echo "NEW_VERSION: $NEW_VERSION"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        TRIMMED_VERSION=$(echo "$NEW_VERSION" | sed 's/^v//')
        echo "TRIMMED_VERSION=$TRIMMED_VERSION" >> $GITHUB_ENV
    - name: Check tag
      uses: mukunku/tag-exists-action@v1.6.0
      id: check-tag
      with:
        tag: ${{env.NEW_VERSION}}
    - name: Publish to TestPyPi
      if: github.event_name == 'push' && github.ref == 'refs/heads/develop' && steps.check-tag.outputs.exists == 'false'
      run: |
        rm -rf dist
        echo "TEST RELEASE CHECK CONDITION"
        python -m build
        # twine check dist/*
        # twine upload -r testpypi --username __token__ --password ${{ secrets.TEST_PYPI_API_TOKEN }} --skip-existing dist/*
    - name: Publish to PyPi
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check-tag.outputs.exists == 'false'
      run: |
        rm -rf dist
        python -m build
        twine check dist/*
        twine upload --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} dist/*¬†
    - name: Create Tag
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check-tag.outputs.exists == 'false'
      uses: rickstaa/action-create-tag@v1.7.2
      with:
        tag: ${{env.NEW_VERSION}}
    - name: Generate changelog
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check-tag.outputs.exists == 'false'
      id: build_changelog
      uses: mikepenz/release-changelog-builder-action@v4
      with:
        configurationJson: |
          {
            "categories": [
              {
                  "title": "## üí¨ Changes",
                  "labels": []
              },
              {
                  "title": "## üêõ Fixes",
                  "labels": ["fix", "bug"]
              },
              {
                  "title": "## üì¶ Dependencies",
                  "labels": ["dependencies"]
              }
            ]
          }
        ignorePreReleases: "false"
        fromTag: ${{ steps.previous_tag.outputs.tag }}
        toTag: ${{env.NEW_VERSION}}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Create release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.check-tag.outputs.exists == 'false'
      uses: ncipollo/release-action@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ env.NEW_VERSION }}
        draft: false
        body: |
          [PyEPP on PyPI](https://pypi.org/project/pyepp/${{env.TRIMMED_VERSION}}/)

          ${{ steps.build_changelog.outputs.changelog }}
        makeLatest: true
        artifacts: "./dist/*"
    - name: Cleanup workspace
      uses: colpal/actions-clean@v1
      if: ${{ always() }} # To ensure this step runs even when earlier steps fail
